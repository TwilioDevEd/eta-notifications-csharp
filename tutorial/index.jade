.chapter(data-title='Setting Up The Application')
  .step(
    data-title='What Are We Building?',
    data-file='ETANotifications/Global.asax.cs')
    :markdown
      ## Eta Notifications - Laundry On-Demand

      ![ETA Notifications](http://howtodocs.s3.amazonaws.com/eta-notifications.png)

      There are a wide range of businesses that deliver goods or services to
      their customers on-demand. Companies like Uber, TaskRabbit, and
      Instacart have built an entire industry around the fact that we, the
      customer, like to order things instantly, wherever we are. The key to
      those services working is notifying customers instantly when things
      change.

      In this tutorial, we'll build a notification system for Laundr.io, an
      on-demand laundry service.

      Let's get started!
      
      ---

      **See Also:**
      * [Getting Started with ASP.NET MVC](//www.asp.net/mvc/overview/getting-started)
      * [Getting Started with Entity Framework](//www.asp.net/mvc/overview/getting-started/getting-started-with-ef-using-mvc/creating-an-entity-framework-data-model-for-an-asp-net-mvc-application)
      
  .step(
    data-title="Customer's notifications",
    data-file='ETANotifications/Controllers/OrdersController.cs'
    data-highlight='50-76')
    :markdown
      ## Trigger the Notifications

      This screen shows two buttons that allow the laundry delivery person to
      trigger notifications. There are two cases we'd like to handle:

      1. Delivery person picks up laundry to be delivered.

      2. Delivery person is arriving to the customer's house.

      In a production app we would probably trigger the second notification
      when the delivery person was physically near the customer, using GPS. In
      this case we'll just use a button.

      Now, on the server we're going to use the Twilio API Client to actually
      send out the notifications.
  
  
  .step(
    data-title='Creating a Twilio API Client',
    data-file='ETANotifications/Services/NotificationServices.cs')
    :markdown
      ## Setting up the Twilio REST Client

      Here we create a simple service with an authenticated Twilio REST API
      client that we can use anytime we need to send a text message. We
      initialize it with our [Twilio Account
      Credentials](//www.twilio.com/user/account/settings) stored
      as environment variables.

      ---

      **See Also:**
      * [Twilio SMS and MMS Quickstart](//www.twilio.com/docs/quickstart/ruby/sms/sending-via-rest)
      
      
  .step(
    data-title='Handling the Notification Trigger',
    data-file='ETANotifications/Controllers/OrdersController.cs',
    data-highlight='59-60,73-74')
    :markdown
      ## Handling the Notification Trigger

      This code handles the HTTP `POST` request triggered by the delivery
      person. It uses our `INotificationServices` instance to send an SMS message to the
      customer's phone number, which we have registered in our database.

      Next let's look closer at how we send the SMS.

  .step(
    data-title='Sending the Message',
    data-file='ETANotifications/Services/NotificationServices.cs',
    data-highlight='31')
    :markdown
      ## Sending the Message

      Here is how we actually send the SMS. If we want to improve
      the message we can send a picture of the laundry by adding:

      ```
      _twilioRestClient.SendMessage(_twilioNumber, 
          phoneNumber, 
          message, 
          new []{"http://lorempixel.com/image_output/fashion-q-c-640-480-1.jpg"});
      ```

      In addition to the required parameters, we can pass a `status_callback`
      url to let us know if the message was delivered. Let's take a closer
      look at how this works.
      

  .step(
    data-title='Handling the Twilio Callback',
    data-file='ETANotifications/Controllers/OrdersController.cs',
    data-highlight='78-87')
    :markdown
      ## Handling the Twilio Callback

      Twilio will make a post request to this controller, each time our message 
      status changes to one of the following: queued, failed, sent, delivered, or undelivered.

      We then update this `NotificationStatus` on the `Order` so that we can decide 
      what to do next with the Order. This is a great place to add logic that would 
      resend the message or send out an [automated survey](//www.twilio.com/docs/tutorials/walkthrough/automated-survey/csharp/mvc).

      ---
      **See Also:**
      * [Message Status](//www.twilio.com/docs/api/rest/sending-messages#status-callback-parameter-request-parameters)
  
  .step
    :markdown
      ## Where to next?

      That's it! We've just implemented an on-demand notification service that 
      alerts our customers when their order is arriving. If you're a
      ASP.NET MVC developer working with Twilio, you might want to check out these
      other tutorials.

      [**Workflow Automation**](//www.twilio.com/docs/tutorials/walkthrough/workflow-automation/csharp/mvc)

      Increase your rate of response by automating the workflows that are key
      to your business. In this tutorial, learn how to build a ready-for-scale
      automated SMS workflow, for a vacation rental company.

      [**Masked Numbers**](//www.twilio.com/docs/tutorials/walkthrough/masked-numbers/csharp/mvc)

      Protect your users' privacy by anonymously connecting them with Twilio
      Voice and SMS. Learn how to create disposable phone numbers on-demand,
      so two users can communicate without exchanging personal information.

      ### Did this help?

      Thanks for checking out this tutorial! If you have any feedback
      to share with us, we'd love to hear it. Tweet
      [@twilio](//twitter.com/twilio) to let us know what you
      think.
